#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include "macros.h"

#define TRUE 1
#define FALSE 0 

extern void init_print ( void );

#define SAVE_CONTEXT()	\
	asm volatile ( 	"push	r0		\n\t"	\
			"in	r0, __SREG__	\n\t"	\
			"cli			\n\t"	\
			"push	r0		\n\t"	\
			"push	r1		\n\t"	\
			"push	r2		\n\t"	\
			"push	r3		\n\t"	\
			"push	r4		\n\t"	\
			"push	r5		\n\t"	\
			"push	r6		\n\t"	\
			"push	r7		\n\t"	\
			"push	r8		\n\t"	\
			"push	r9		\n\t"	\
			"push	r10		\n\t"	\
			"push	r11		\n\t"	\
			"push	r12		\n\t"	\
			"push	r13		\n\t"	\
			"push	r14		\n\t"	\
			"push	r15		\n\t"	\
			"push	r16		\n\t"	\
			"push	r17		\n\t"	\
			"push	r18		\n\t"	\
			"push	r19		\n\t"	\
			"push	r20		\n\t"	\
			"push	r21		\n\t"	\
			"push	r22		\n\t"	\
			"push	r23		\n\t"	\
			"push	r24		\n\t"	\
			"push	r25		\n\t"	\
			"push	r26		\n\t"	\
			"push	r27		\n\t"	\
			"push	r28		\n\t"	\
			"push	r29		\n\t"	\
			"push	r30		\n\t"	\
			"push	r31		\n\t"	\
			"lds	r26, ptr_sp	\n\t"	\
			"lds	r27, ptr_sp + 1	\n\t"	\
			"in 	r0, 0x3d	\n\t"	\
			"st	x+, r0		\n\t"	\
			"in 	r0, 0x3e	\n\t"	\
			"st	x+, r0		\n\t"	\
		);


#define RESTORE_CONTEXT()\
	asm volatile ( 	"lds 	r26, ptr_sp	\n\t"	\
			"lds	r27, ptr_sp + 1	\n\t"	\
			"ld	r28, x+		\n\t"	\
			"out	__SP_L__, r28	\n\t"	\
			"ld	r29, x+		\n\t"	\
			"out	__SP_H__, r29	\n\t"	\
			"pop	r31		\n\t"	\
			"pop	r30		\n\t"	\
			"pop	r29		\n\t"	\
			"pop	r28		\n\t"	\
			"pop	r27		\n\t"	\
			"pop	r26		\n\t"	\
			"pop	r25		\n\t"	\
			"pop	r24		\n\t"	\
			"pop	r23		\n\t"	\
			"pop	r22		\n\t"	\
			"pop	r21		\n\t"	\
			"pop	r20		\n\t"	\
			"pop	r19		\n\t"	\
			"pop	r18		\n\t"	\
			"pop	r17		\n\t"	\
			"pop	r16		\n\t"	\
			"pop	r15		\n\t"	\
			"pop	r14		\n\t"	\
			"pop	r13		\n\t"	\
			"pop	r12		\n\t"	\
			"pop	r11		\n\t"	\
			"pop	r10		\n\t"	\
			"pop	r9		\n\t"	\
			"pop	r8		\n\t"	\
			"pop	r7		\n\t"	\
			"pop	r6		\n\t"	\
			"pop	r5		\n\t"	\
			"pop	r4		\n\t"	\
			"pop	r3		\n\t"	\
			"pop	r2		\n\t"	\
			"pop	r1		\n\t"	\
			"pop	r0		\n\t"	\
			"out 	__SREG__, r0	\n\t"	\
			"pop	r0		\n\t"	\
		);

void timer1_init ( void );


#define F_CPU 16000000UL
void blink_led ( void );

void TIMER1_COMPA_vect ( void ) __attribute__ ( ( signal, naked ) );
void function ( void ) __attribute__ ( ( naked ) );

uint8_t main_sp[2];
uint8_t fn_sp[2];

uint8_t *ptr_sp;

void TIMER1_COMPA_vect ( void )
{
  SAVE_CONTEXT();

  ptr_sp = &fn_sp[0];

  asm volatile (  "lds    r26, ptr_sp     \n\t"   \
                  "lds    r27, ptr_sp + 1 \n\t"   \
                  "ld     r28, x+         \n\t"   \
                  "out    __SP_L__, r28   \n\t"   \
                  "ld     r29, x+         \n\t"   \
                  "out    __SP_H__, r29   \n\t"   \
	);

  if ( fn_sp[0] == 0xFF && fn_sp [1] == 0x02 )
  {
    sei ();
    function ();

  } else {
    RESTORE_CONTEXT ();
    asm volatile ( "reti" );
  }
 
  /* execution will never reach here */ 
  RESTORE_CONTEXT();
  asm volatile ( "reti" );
}

void function ( void )
{
  while (1)
  {
    printf ( "I am in function\n" );
  }
}

void blink_led ( void )
{
   PORTB ^= _BV ( PB5 );
}

int main ( void )
{
  init_print ();
  printf ( "Test\n" );

  ptr_sp = & main_sp [0];

  /* initialise fn_sp[0] = 0xFF and fn_sp[1] =0x02 in main */
  fn_sp[0] = 0xFF;
  fn_sp[1] = 0x02;

  DDRB |= _BV ( DDB5 );
  cli ();
  timer1_init ();
  sei ();  

  while (1)
  {
  }

  return 0;
}

void timer1_init ( void ) 
{
    OCR1A = 0xFFFE;

    TCCR1B |= ( 1 << WGM12 );
    // Mode 4, CTC on OCR1A

    TIMSK1 |= ( 1 << OCIE1A );
    //Set interrupt on compare match

//    TCCR1B |= ( 1 << CS12 ) | ( 1 << CS10 ); //1024
    TCCR1B |= ( 1 << CS12 ); //256

}
